[
  {
    "objectID": "qmd/initial_genome_check.html",
    "href": "qmd/initial_genome_check.html",
    "title": "1  Initial Genome Check",
    "section": "",
    "text": "Loading packages and setting up functions\n\n\ntoggle code\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(prismatic)\nlibrary(ggforce)\nlibrary(geomtextpath)\nlibrary(glue)\nlibrary(here)\nsource(here(\"R/plot_defaults.R\"))\n\ncheck_paritions <- \\(genome = \"arcgaz_v1\"){\n  data <- read_tsv(here(\"data\", \"genomes\", glue(\"/{genome}.fa.gz.fai\")),\n                   col_names = c(\"seq_name\", \"length\", \"offset\", \"linebases\", \"linewidth\")) |>\n    left_join(read_tsv(here(\"data\", \"genomes\", \"partitions\", glue(\"{genome}_partitions.tsv\")),\n                       # glue(\"data/genomes/{spec}_partitions.tsv\"),\n                       col_names = c(\"seq_name\", 'partition'))) |>\n    mutate(idx = row_number(),\n           end_pos = cumsum(length))\n\n  partitions <- data |>\n    group_by(partition) |>\n    summarize(\n      n = n(),\n      length = sum(length),\n      end_pos = max(end_pos),\n      idx_start = min(idx),\n      idx_end = max(idx)\n    ) |>\n    ungroup() |>\n    mutate(failed = partition %in% c('02', '04', '06'))\n\n  p1 <- data |> \n    ggplot() +\n    geom_vline(data = partitions,\n               aes(xintercept = end_pos* 1e-9, color = partition),\n               alpha =.3) +\n    geom_step(aes(group = 1L, x = end_pos * 1e-9, y = idx, color = partition),\n              linewidth = .3, alpha = .3) +\n    geom_linerange(aes(group = 1L, xmin = lag(end_pos * 1e-9, default = 0),\n                       xmax = end_pos * 1e-9,\n                       y = idx, color = partition)) +\n    labs(subtitle = genome)\n\n  p2 <- partitions |>\n    ggplot(aes(x = partition, y = length, color = partition)) +\n    geom_bar(stat = \"identity\", aes(fill = after_scale(clr_alpha(color)))) +\n    # geom_bar(data = partitions |> filter(failed),\n    #          stat = \"identity\", fill = \"transparent\", color = \"black\", size = .5) +\n    geom_text(aes(y = length /2, label = n), angle = 90, hjust = -.2, \n              color = 'black', family = fnt_sel)+\n    labs(subtitle = \"sequence within partitions\")\n\n  p3 <- partitions |>\n    ggplot(aes(x = partition, y = n, color = partition)) +\n    geom_bar(stat = \"identity\", aes(fill = after_scale(clr_alpha(color)))) #+\n  # geom_bar(data = partitions |> filter(failed),\n  #          stat = \"identity\", fill = \"transparent\", color = \"black\", size = .5)\n\n  p4 <- data |>\n    ggplot(aes(x = log10(length))) +\n    geomtextpath::geom_textvline(data = tibble(x = c(100, 250, 500, 1000)),\n                                 aes(xintercept = log10(x),\n                                     label = glue(\"{x} bp\")),\n                                 linetype = 3, color = clrs[[2]],\n                                 family = fnt_sel,\n                                 size = 2.5, hjust = .85) +\n    geom_density(color = clr_lighten(clrs[[2]],.2),\n                 fill = clr_alpha(clr_lighten(clrs[[2]],.2))) +\n    scale_x_reverse() +\n    coord_flip(expand = 0, xlim = log10(c(1e8, 30)))+\n    labs(subtitle = \"scaffold sizes\")\n\n  clr_ln <- 'gray50'\n   \n p1 + (p2 / p3) + p4 +\n      plot_layout(widths = c(.7, 1, .3)) +\n      plot_annotation(title = genome) &\n      theme_minimal(base_family = fnt_sel) &\n      theme(legend.position = \"none\",\n            plot.subtitle = element_text(hjust = .5),\n            panel.grid = element_blank(),\n            panel.grid.minor = element_blank(),\n            axis.ticks = element_line(linewidth = .3, color = clr_ln),\n            axis.ticks.length = unit(3, 'pt'),\n            axis.line = element_line(color = clr_ln, linewidth = .4))\n}\n\npartition_genome <- \\(genome){\n  # read in the scaffold sizes from genome index file\n  data <- read_tsv(here(\"data\", \"genomes\", glue(\"{genome}.fa.gz.fai\")),\n                   col_names = c(\"scaff\", \"length\", \"offset\",\n                                 \"linebases\", \"linewidth\"))\n\n  # compute total genome length\n  total_length <- sum(data$length)\n\n  # compute genome wide end-coordinate for each scaffold,\n  # assign to partition by integer division by 0.1 of\n  # the total length and export as reference tsv file.\n  data2 <- data |>\n    mutate(end = cumsum(length),\n           partition_prep = str_pad(1 + end %/% (total_length/n_part + 1),\n                                    width = 2,\n                                    pad = 0),\n           partition_idx = as.numeric(factor(partition_prep)))\n\n  n_missing <- n_part - max(data2$partition_idx)\n  # print(glue(\"n_missing: {n_missing}, n_part: {n_part}, max_part: {max(data2$partition_idx)}\"))\n  if(n_missing > 0){\n    data3 <- data2 |>\n      group_by(partition_idx) |>\n      mutate(partition_adjust = if_else(partition_idx == max(partition_idx),\n                                        partition_idx + (row_number() - 1) %/% ( ceiling(n() / (n_missing + 1) )),\n                                        partition_idx)) |>\n      ungroup()\n  } else {\n    data3 <- data2 |>\n      mutate(partition_adjust = partition_idx)\n  }\n\n  data_out <- data3 |>\n    mutate(partition = str_pad(partition_adjust, width = 2, pad = 0)) |>\n    dplyr::select(scaff, partition) |>\n    write_tsv(file = here(\"data\", \"genomes\", \"partitions\", glue(\"{genome}_partitions.tsv\")),\n              col_names = FALSE)\n}\n\n\nPartition all genomes, where the labels indicate the following:\n\narcgaz_dt_h1: A. gazella dovetail assembly, haplotype 1\narcgaz_dt_h2: A. gazella dovetail assembly, haplotype 2\narcgaz_v3: A. gazella, previous reference genome (Peart et al. (2021), GCA_900642305.1)\nzalcal_v1: Zalophus californianus reference genome (Peart et al. (2021), GCF_009762305.2)\n\n\n\n\ntoggle code\nall_genomes <- c('arcgaz_dt_h1', 'arcgaz_dt_h2', 'arcgaz_v3', 'zalcal_v1')\nn_part <- 20\nall_genomes |> walk(partition_genome)\n\n\nCreating all plots and combining them into a patchwork.\n\n\ntoggle code\nall_genomes |>\n  map(check_paritions) |> \n  wrap_plots(ps, ncol = 1) &\n  scale_color_manual(values = c(\n    scales::colour_ramp(c(clrs[[1]], clr_lighten(clrs[[1]],.9)))(seq(0,1,length.out = ceiling(n_part/2))),\n    scales::colour_ramp(c(clr_lighten(clrs[[2]],.9), clrs[[2]]))(seq(0,1,length.out = ceiling(n_part/2)))))\n\n\n\n\n\n\n\n\n\nPeart, Claire R., Christina Williams, Saurabh D. Pophaly, Benjamin A. Neely, Frances M. D. Gulland, David J. Adams, Bee Ling Ng, et al. 2021. “Hi-C Scaffolded Short- and Long-Read Genome Assemblies of the California Sea Lion Are Broadly Consistent for Syntenic Inference Across 45 Million Years of Evolution.” Molecular Ecology Resources 21 (7): 2455–70. https://doi.org/10.1111/1755-0998.13443."
  },
  {
    "objectID": "qmd/references.html",
    "href": "qmd/references.html",
    "title": "6  References",
    "section": "",
    "text": "Peart, Claire R., Christina Williams, Saurabh D. Pophaly, Benjamin A.\nNeely, Frances M. D. Gulland, David J. Adams, Bee Ling Ng, et al. 2021.\n“Hi-C Scaffolded Short- and Long-Read Genome\nAssemblies of the California Sea Lion Are Broadly\nConsistent for Syntenic Inference Across 45 Million Years of\nEvolution.” Molecular Ecology Resources 21 (7): 2455–70.\nhttps://doi.org/10.1111/1755-0998.13443."
  }
]