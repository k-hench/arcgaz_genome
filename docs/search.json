[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "arcgaz_genome",
    "section": "",
    "text": "Index"
  },
  {
    "objectID": "qmd/initial_genome_check.html",
    "href": "qmd/initial_genome_check.html",
    "title": "1  Initial Genome Check",
    "section": "",
    "text": "Loading packages and setting up functions\n\n\ntoggle code\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(prismatic)\nlibrary(ggforce)\nlibrary(geomtextpath)\nlibrary(glue)\nlibrary(here)\n\nfnt_sel <- \"TeX Gyre Pagella\"\n# clrs <- ghibli::ghibli_palette(name = \"TotoroMedium\")[c(5,6)]\nclrs <- c( clr_darken(\"#db4a32\",.3),\n           clr_darken(\"#66c2a5\",.3))\n\ncheck_paritions <- \\(genome = \"arcgaz_v1\"){\n  data <- read_tsv(here(\"data\", \"genomes\", glue(\"/{genome}.fa.gz.fai\")),\n                   col_names = c(\"seq_name\", \"length\", \"offset\", \"linebases\", \"linewidth\")) |>\n    left_join(read_tsv(here(\"data\", \"genomes\", \"partitions\", glue(\"{genome}_partitions.tsv\")),\n                       # glue(\"data/genomes/{spec}_partitions.tsv\"),\n                       col_names = c(\"seq_name\", 'partition'))) |>\n    mutate(idx = row_number(),\n           end_pos = cumsum(length))\n\n  partitions <- data |>\n    group_by(partition) |>\n    summarize(\n      n = n(),\n      length = sum(length),\n      end_pos = max(end_pos),\n      idx_start = min(idx),\n      idx_end = max(idx)\n    ) |>\n    ungroup() |>\n    mutate(failed = partition %in% c('02', '04', '06'))\n\n  p1 <- data |> \n    ggplot() +\n    geom_vline(data = partitions,\n               aes(xintercept = end_pos* 1e-9, color = partition),\n               alpha =.3) +\n    geom_step(aes(group = 1L, x = end_pos * 1e-9, y = idx, color = partition),\n              linewidth = .3, alpha = .3) +\n    geom_linerange(aes(group = 1L, xmin = lag(end_pos * 1e-9, default = 0),\n                       xmax = end_pos * 1e-9,\n                       y = idx, color = partition)) +\n    labs(subtitle = genome)\n\n  p2 <- partitions |>\n    ggplot(aes(x = partition, y = length, color = partition)) +\n    geom_bar(stat = \"identity\", aes(fill = after_scale(clr_alpha(color)))) +\n    # geom_bar(data = partitions |> filter(failed),\n    #          stat = \"identity\", fill = \"transparent\", color = \"black\", size = .5) +\n    geom_text(aes(y = length /2, label = n), angle = 90, hjust = -.2, \n              color = 'black', family = fnt_sel)+\n    labs(subtitle = \"sequence within partitions\")\n\n  p3 <- partitions |>\n    ggplot(aes(x = partition, y = n, color = partition)) +\n    geom_bar(stat = \"identity\", aes(fill = after_scale(clr_alpha(color)))) #+\n  # geom_bar(data = partitions |> filter(failed),\n  #          stat = \"identity\", fill = \"transparent\", color = \"black\", size = .5)\n\n  p4 <- data |>\n    ggplot(aes(x = log10(length))) +\n    geomtextpath::geom_textvline(data = tibble(x = c(100, 250, 500, 1000)),\n                                 aes(xintercept = log10(x),\n                                     label = glue(\"{x} bp\")),\n                                 linetype = 3, color = clrs[[2]],\n                                 family = fnt_sel,\n                                 size = 2.5, hjust = .85) +\n    geom_density(color = clr_lighten(clrs[[2]],.2),\n                 fill = clr_alpha(clr_lighten(clrs[[2]],.2))) +\n    scale_x_reverse() +\n    coord_flip(expand = 0, xlim = log10(c(1e8, 30)))+\n    labs(subtitle = \"scaffold sizes\")\n\n  clr_ln <- 'gray50'\n   \n p1 + (p2 / p3) + p4 +\n      plot_layout(widths = c(.7, 1, .3)) +\n      plot_annotation(title = genome) &\n      theme_minimal(base_family = fnt_sel) &\n      theme(legend.position = \"none\",\n            plot.subtitle = element_text(hjust = .5),\n            panel.grid = element_blank(),\n            panel.grid.minor = element_blank(),\n            axis.ticks = element_line(linewidth = .3, color = clr_ln),\n            axis.ticks.length = unit(3, 'pt'),\n            axis.line = element_line(color = clr_ln, linewidth = .4))\n}\n\npratition_genome <- \\(genome){\n  # read in the scaffold sizes from genome index file\n  data <- read_tsv(here(\"data\", \"genomes\", glue(\"{genome}.fa.gz.fai\")),\n                   col_names = c(\"scaff\", \"length\", \"offset\",\n                                 \"linebases\", \"linewidth\"))\n\n  # compute total genome length\n  total_length <- sum(data$length)\n\n  # compute genome wide end-coordinate for each scaffold,\n  # assign to partition by integer division by 0.1 of\n  # the total length and export as reference tsv file.\n  data2 <- data |>\n    mutate(end = cumsum(length),\n           partition_prep = str_pad(1 + end %/% (total_length/n_part + 1),\n                                    width = 2,\n                                    pad = 0),\n           partition_idx = as.numeric(factor(partition_prep)))\n\n  n_missing <- n_part - max(data2$partition_idx)\n  # print(glue(\"n_missing: {n_missing}, n_part: {n_part}, max_part: {max(data2$partition_idx)}\"))\n  if(n_missing > 0){\n    data3 <- data2 |>\n      group_by(partition_idx) |>\n      mutate(partition_adjust = if_else(partition_idx == max(partition_idx),\n                                        partition_idx + (row_number() - 1) %/% ( ceiling(n() / (n_missing + 1) )),\n                                        partition_idx)) |>\n      ungroup()\n  } else {\n    data3 <- data2 |>\n      mutate(partition_adjust = partition_idx)\n  }\n\n  data_out <- data3 |>\n    mutate(partition = str_pad(partition_adjust, width = 2, pad = 0)) |>\n    dplyr::select(scaff, partition) |>\n    write_tsv(file = here(\"data\", \"genomes\", \"partitions\", glue(\"{genome}_partitions.tsv\")),\n              col_names = FALSE)\n}\n\n\nPartition all genomes, where the labels indicate the following:\n\narcgaz_v1: A. gazella, original reference genome\narcgaz_bp: A. gazella, PacBio based (HighC) reference genome\narcgaz_dt_h1: A. gazella dovetail assembly, haplotype 1\narcgaz_dt_h2: A. gazella dovetail assembly, haplotype 2\nzalcal_v1: Zalophus californianus reference genome\n\n\n\ntoggle code\nall_genomes <- c('arcgaz_bp', 'arcgaz_dt_h1', 'arcgaz_dt_h2', 'arcgaz_v1', 'zalcal_v1')\nn_part <- 20\nall_genomes |> walk(pratition_genome)\n\n\nCreating all plots and combining them into a patchwork.\n\n\ntoggle code\nall_genomes |>\n  map(check_paritions) |> \n  wrap_plots(ps, ncol = 1) &\n  scale_color_manual(values = c(\n    scales::colour_ramp(c(clrs[[1]], clr_lighten(clrs[[1]],.9)))(seq(0,1,length.out = ceiling(n_part/2))),\n    scales::colour_ramp(c(clr_lighten(clrs[[2]],.9), clrs[[2]]))(seq(0,1,length.out = ceiling(n_part/2)))))"
  },
  {
    "objectID": "qmd/inspect_initial_alignments.html",
    "href": "qmd/inspect_initial_alignments.html",
    "title": "2  Inspect initial genome alignments",
    "section": "",
    "text": "toggle code\nlibrary(tidyverse)\nlibrary(prismatic)\nlibrary(ggtext)\nlibrary(circlize)\nlibrary(glue)\nlibrary(patchwork)\n\nfnt_sel <- \"TeX Gyre Pagella\"\n# clrs <- ghibli::ghibli_palette(name = \"TotoroMedium\")[c(5,6)]\nclrs <- c( clr_darken(\"#db4a32\",.3),\n           clr_darken(\"#66c2a5\",.3))\n\nread_size <- \\(genome = \"\", y_base = 0){\n  read_tsv(here::here(\"results\", \"genome\", str_c(genome,\".size\")),\n           col_names = c(\"chr\", \"size\")) |> \n    arrange(-size) |> \n    mutate(size_idx = row_number(),\n           end = cumsum(size),\n           start = lag(end,default =  0),\n           eo = size_idx %% 2,\n           y_base = y_base,\n           genome = genome)\n}\n\ngenomes <- c(\"arcgaz_dt_h1_hardmasked\",\n            # \"arcgaz_dt_h1_anchored\",\n             \"arcgaz_dt_h2_hardmasked\",\n             \"arcgaz_v1_hardmasked\",\n             \"arcgaz_bp_hardmasked\",\n             \"zalcal_v1_hardmasked\")\n\nsizes <- tibble(genome = genomes,\n                y_base = seq_along(genomes)-1) |> \n  pmap_dfr(read_size)\n\ngenome_summary <- sizes |> \n  group_by(genome, y_base) |> \n  summarise(n = n(),\n            toal_length = max(end))\n\ng_height <- .8\nalign_min_length <- 3e5\n\n\n\n\ntoggle code\nn_largest <- 37\nsizes |> \n  filter(size_idx < n_largest) |> \n  ggplot() +\n  geom_linerange(data = tibble(end = align_min_length),\n                 aes(y = .9, xmin = 0, xmax = end ), size = 1.5) +\n  geom_rect(data = genome_summary,\n            aes(xmin = 0, xmax = toal_length,\n                ymin = y_base, ymax = y_base + g_height),\n            color = \"gray50\", fill = \"gray90\") +\n  geom_rect(aes(xmin = start, xmax = end,\n                ymin = y_base, ymax = y_base + g_height,\n                color = factor(eo),\n                fill = after_scale(clr_lighten(color, .5)))) +\n  geom_richtext(data = genome_summary,\n                aes(y = y_base + .5 * g_height,\n                    label = glue(\"{str_remove(genome, '_hardmasked')}<br>n: {n}\"),\n                    x = -.1e9),hjust = 1,\n                fill = NA, label.color = NA, family = fnt_sel,\n                label.padding = grid::unit(rep(0, 4), \"pt\")) + \n  scale_y_continuous(NULL) +\n  scale_x_continuous(NULL, breaks = c(0:3)*1e9,\n                     labels = str_c(0:3, \" Gb\")) + \n  scale_color_manual(values = clrs, guide = \"none\") +\n  coord_cartesian(xlim = c(-4.5e8, 2.6e9),\n                  ylim = c(-.1, length(genomes)),\n                  expand = 0)+\n  # coord_polar() +\n  theme_minimal(base_family = fnt_sel) +\n  theme(panel.grid = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_line(linewidth = .2),\n        axis.ticks.length = unit(-4,\"pt\"))\n\n\n\n\n\n\n\ntoggle code\nget_psl <- \\(file){\n  vroom::vroom(here::here(\"results\",\"psl\", file),\n               delim = \"\\t\",\n           col_names = c(\"matches\", \"misMatches\", \"repMatches\", \"nCount\",\n                         \"qNumInsert\", \"qBaseInsert\", \"tNumInsert\",\n                         \"tBaseInsert\", \"strand\", \"qName\", \"qSize\", \"qStart\",\n                         \"qEnd\", \"tName\", \"tSize\", \"tStart\", \"tEnd\",\n                         \"blockCount\")) |> \n    select( tName, tStart, tEnd, qName, qStart, qEnd, strand ) |> \n    mutate(tSize = tEnd - tStart,\n           qSize = qEnd - qStart)\n}\n\nsimplify_names <- \\(str){\n  str_remove_all(str, \";.*\") |> \n    str_replace(\"ScDpJTZ_\", \"A.\") |> \n    str_replace(\"Sc3htSU_\", \"HT2.\") |> \n    str_replace(\"NC_045\", \"Z.\") |> \n    str_replace(\"NW_0233655\", \"Z.\") |> \n    str_replace(\"ScWAj4l_\", \"V1.\")|> \n    str_replace(\"ptg000\", \"PB.\")\n}\n\ninspect_alignment <- \\(aln_name = \"zalcal_v1\", n_alignments = 1e3){\n  z_psl <- get_psl(glue(\"{aln_name}-18.psl.gz\"))\n  \n  sizes_az <- sizes |>\n    filter(size_idx < n_largest,\n           genome %in% c(\"arcgaz_dt_h1_hardmasked\", aln_name)) |> \n    mutate(l_start = 0,\n           chr = simplify_names(chr)) |> \n    select(chr, start = l_start, end = size, genome)\n  \n  z_psl_above <- z_psl |> \n    arrange(-tSize) |> \n    # filter(tSize > align_min_length) |> \n    mutate(tName = simplify_names(tName),\n           qName = simplify_names(qName)) |> \n    filter(tName %in% sizes_az$chr,\n           qName %in% sizes_az$chr) |> \n    head(n_alignments) \n  \n  p1 <- z_psl_above |> \n    ggplot() +\n    geom_density(aes(x = tSize), adjust = .1,\n                 color = clrs[1], fill = clr_alpha(clrs[1])) +\n    geom_density(aes(x = qSize, y = -..density..),adjust = .1,\n                 color = clrs[2], fill = clr_alpha(clrs[2])) +\n    theme_minimal(base_family = fnt_sel)\n  \n  chr_sel <- sizes_az |> \n    filter(genome != genomes[[1]]) |> \n    pluck(\"chr\")\n  \n  chr_sel_a <- sizes_az |> \n    filter(genome == genomes[[1]]) |> \n    pluck(\"chr\")\n  chr_f <- factor(chr_sel, levels = chr_sel)\n  n_chr <- length(chr_sel)\n  \n  clr_al <- \\(str){\n    str_ramp <- ((factor(str, levels = levels(chr_f)) |> \n                    as.integer()) -1) / (n_chr - 1)\n    \n    scales::colour_ramp(colors = c(clrs[1],\"gray30\", clrs[2], \"black\",\"black\"))(str_ramp)\n  }\n  \n  clrs_c <- c(rep(\"gray30\", sizes_az |>  filter(grepl(\"A\", chr)) |> nrow()),\n              clr_al(sizes_az |>  filter(!grepl(\"A\", chr)) |> pluck(\"chr\")))\n  # c(clrs) |> \n  #   set_names(nm = genomes[c(1,4)])\n  \n  plot.new()\n  circos.clear()\n  col_text <- \"white\"\n    circos.par(\"track.height\" = 0.8,\n               gap.degree = .25,\n               cell.padding=c(0, 0, 0, 0))\n    circos.initialize(factors = sizes_az$chr, \n                      xlim = sizes_az[,2:3] |>\n                        as.matrix())\n    \n    # genomes\n    circos.track(ylim=c(0, 1), \n                 panel.fun=function(x, y) {\n                   chr=CELL_META$sector.index\n                   xlim=CELL_META$xlim\n                   ylim=CELL_META$ylim\n                   circos.text(mean(xlim), mean(ylim), chr, cex=0.5, col=col_text, \n                               facing = \"bending.inside\",\n                               niceFacing = TRUE,\n                               family = fnt_sel)},\n                 bg.col= clrs_c,\n                 bg.border = FALSE, \n                 track.height = 0.06)\n    \n    # genomes x axis\n    x_scale <- 1e6\n    brk <- c(0, 0.5, 1, 1.5, 2)*x_scale * 100\n    circos.track(track.index = get.current.track.index(), \n                 panel.fun=function(x, y) {\n                   circos.axis(h=\"top\",\n                               major.at=brk,\n                               labels = round(brk/x_scale, 1), \n                               labels.cex = 0.4,\n                               col = \"black\", labels.col=\"black\",\n                               lwd = 0.7, labels.facing=\"clockwise\")\n                 },\n                 bg.border = FALSE)\n    \n    circos.genomicLink(z_psl_above[1:3], z_psl_above[4:6],\n                       col = clr_alpha(clr_al( z_psl_above$qName),.4))\n    \n    p2 <- recordPlot()\n\n    z_psl_in_top_length <- z_psl |>\n      mutate(tName = simplify_names(tName),\n             qName = simplify_names(qName)) |>\n      filter(tName %in% sizes_az$chr,\n             qName %in% sizes_az$chr)\n\n    z_psl_matrix <- z_psl_in_top_length |>\n      group_by(tName, qName) |>\n      summarize(n = n(),\n                alignment_length = sum(tSize)) |>\n      ungroup() |>\n      left_join(sizes_az |> select(qName = chr, qSize = end)) |>\n      left_join(sizes_az |> select(tName = chr, tSize = end)) |>\n      mutate(tName = factor(tName, chr_sel_a),\n             qName = factor(qName, chr_sel),\n             t_aling_fract = alignment_length / tSize,\n             q_aling_fract = alignment_length / qSize)\n\n    p3 <- z_psl_matrix |>\n      ggplot(aes(x = tName, y = qName)) +\n      geom_tile(aes(fill = t_aling_fract,\n                    width = (.5 + t_aling_fract) / 2,\n                    height = after_stat(width),\n                    color = after_scale(clr_darken(fill)))) +\n      # scale_fill_manual(values = rev(clrs)) +\n      scale_fill_gradientn(colours = c(\"gray90\", clrs[2] , \"black\")) +\n      guides(fill = guide_colorbar(\"Alginment Fraction (Target)\",\n                                   title.position = \"top\",\n                                   barwidth = unit(.2,\"npc\"),\n                                   barheight = unit(5,\"pt\"))) +\n      coord_equal() +\n      theme_minimal(base_family = fnt_sel) +\n      theme(axis.text.x = element_text(angle = 90),\n            legend.position = \"bottom\")\n\n    p4 <- z_psl_matrix |>\n      ggplot(aes(x = tName, y = qName)) +\n      geom_tile(aes(fill = q_aling_fract,\n                    width = (.5 + q_aling_fract) / 6,\n                    height = after_stat(width),\n                    color = after_scale(clr_darken(fill)))) +\n      # scale_fill_manual(values = rev(clrs)) +\n      scale_fill_gradientn(colours = c(\"gray90\", clrs[1] , \"black\")) +\n      guides(fill = guide_colorbar(\"Alginment Fraction (Querry)\",\n                                   title.position = \"top\",\n                                   barwidth = unit(.2,\"npc\"),\n                                   barheight = unit(5,\"pt\"))) +\n      coord_equal() +\n      theme_minimal(base_family = fnt_sel) +\n      theme(axis.text.x = element_text(angle = 90),\n            legend.position = \"bottom\")\n\n    p5 <- p3 / p4\n\n    tibble(alignment = aln_name,\n           sizes = list(p1),\n           circ = list(p2),\n           matrix = list(p5),\n           psl = list(z_psl),\n           sizes_df = list(sizes_az))\n}\n\n\n\n\ntoggle code\ninspections$sizes |> wrap_plots(ncol = 4)\n\n\n\n\n\n\n\ntoggle code\ninspections$circ[[1]]\ninspections$circ[[2]]\ninspections$circ[[3]]\ninspections$circ[[4]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntoggle code\ninspections$matrix |> wrap_plots(ncol = 4)\n\n\n\n\n\n\n\ntoggle code\nzcal <- inspect_alignment(\"zalcal_v1_hardmasked\")\n\n\n\n\n\n\n\n\ntoggle code\nz_psl <- zcal$psl[[1]] |> \n  mutate(tlength = tEnd - tStart,\n         qlength = qEnd - qStart) |> \n  group_by(tName, qName) |> \n  summarise(t_sum = sum(tlength),\n            q_sum = sum(qlength)) |> \n  ungroup() |> \n  left_join(sizes |> select(chr, t_size = size), by = c(tName = 'chr')) |> \n  left_join(sizes |> select(chr, q_size = size), by = c(qName = 'chr')) |> \n  mutate(t_rel = t_sum / t_size,\n         q_rel = q_sum / q_size,\n         tName = fct_reorder(tName, -t_size),\n         qName = fct_reorder(qName, -q_size)) \n\nz_psl |> \n  ggplot(aes(x = tName, y = qName, fill = -abs(log10(t_rel))))+#between(t_rel, .75,3.75))) +\n  geom_tile(width = .8, height = .8, aes(color = after_scale(clr_darken(fill))), size = .2) +\n  geom_vline(xintercept = 36.5, color = clrs[[1]], size = .4, alpha = .5)+\n  # scale_fill_manual(values = c(`TRUE` = clrs[[1]], `FALSE` = 'gray90'),\n  #                   guide = 'none') +\n  scale_fill_viridis_c()+\n  scale_fill_gradientn(colours = rev(c(clr_lighten(clrs[[1]]), str_c(\"gray\",(1:9)*10))))+\n  coord_equal() +\n  theme_minimal()+\n  theme(axis.text.x = element_text(angle = 90),\n        legend.position = \"bottom\")"
  },
  {
    "objectID": "qmd/anchoring_assessment.html",
    "href": "qmd/anchoring_assessment.html",
    "title": "3  Anchoring Assessment",
    "section": "",
    "text": "toggle code\nlibrary(tidyverse)\nlibrary(prismatic)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(here)\nsource(here(\"R/anchoring_assesment.R\"))\n\n\n\n\ntoggle code\nboth_beds$plot |>\n  wrap_plots(ncol = 1) &\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "qmd/rna_sample_selection.html",
    "href": "qmd/rna_sample_selection.html",
    "title": "4  RNA sample selection",
    "section": "",
    "text": "toggle code\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(prismatic)\nset.seed(22)\nclr1 <-  \"gray20\";  clr2 <-  \"gray50\"\nclrs <- c( clr_darken(\"#db4a32\",.3),\n           clr_darken(\"#66c2a5\",.3))\n\ndata <- read_tsv(here::here(\"data/rna/multiqc_general_stats.txt\")) |> \n  filter(Sample != \"multiqc\") |> \n  rename_with(\\(x){str_remove_all(x, \"FastQC_mqc-generalstats-fastqc-|Snippy_mqc-generalstats-snippy-\")}) |> \n  mutate(pair = str_sub(Sample, 1,-3),\n         mate = str_sub(Sample, -1,-1)) |> \n  select(-Sample) |> \n  pivot_wider(names_from = mate,id_cols = pair, values_from = percent_duplicates:total_sequences) |> \n  mutate(pair = fct_reorder(pair, total_sequences_1)) |> \n  arrange(total_sequences_1) |> \n  separate(pair, into = c(\"sample_id\", \"beach\", \"stage\", \"timepoint\", \"year\"),\n           sep = \"_\",remove = FALSE)\n\nselected_pairs <- data |> \n  filter(!is.na(stage)) |> \n  group_by(beach, stage, .drop = FALSE) |>\n  sample_n(size = 5) |>\n  filter(!(stage == \"pup\" & beach == \"FWB\" & row_number() == 5)) |>\n  pluck('pair')\n\ndata <- data |> \n  mutate(select = pair %in% selected_pairs)\n\n\nChecking the total number of sequences selected (at select is TRUE)\n\n\ntoggle code\n# The upper limit is 600M pairs of reads to avoi\ndata |> \n  group_by(select) |> \n  summarise(n_seqs = sum(total_sequences_1) * 1e-6)\n\n\n# A tibble: 2 × 2\n  select n_seqs\n  <lgl>   <dbl>\n1 FALSE   4026.\n2 TRUE     596.\n\n\nChecking selection across different beaches and age classes\n\n\ntoggle code\ndata |> \n  group_by(select, beach, stage, .drop = FALSE) |> \n  summarise(n_seqs = sum(total_sequences_1) * 1e-6,\n            n = n(), .drop = FALSE)\n\n\n# A tibble: 8 × 6\n# Groups:   select, beach [6]\n  select beach stage n_seqs     n .drop\n  <lgl>  <chr> <chr>  <dbl> <int> <lgl>\n1 FALSE  C21A  <NA>    24.9     1 FALSE\n2 FALSE  F21A  <NA>    24.8     1 FALSE\n3 FALSE  FWB   mum   2008.     51 FALSE\n4 FALSE  FWB   pup   1213.     28 FALSE\n5 FALSE  SSB   pup    755.     19 FALSE\n6 TRUE   FWB   mum    158.      5 FALSE\n7 TRUE   FWB   pup    209.      4 FALSE\n8 TRUE   SSB   pup    228.      5 FALSE\n\n\nVisual check:\n\n\ntoggle code\np1 <- data |> \n  ggplot() +\n  ggstance::geom_barh(aes(y = pair, x = total_sequences_1 * 1e-6,\n                          color = select, fill = after_scale(clr_alpha(color))),\n                      stat = 'identity', linewidth= .5, show.legend =  'none')+\n  labs(x = \"number of sequences (Mil)\") +\n  coord_cartesian(xlim = c(0, 70))\n\np2 <- data |> \n  # names()\n  ggplot(aes(x = total_sequences_1 * 1e-6,  color = select)) +\n  geom_histogram(linewidth= .5,bins = 17, \n                 aes(group = select, fill = after_scale(clr_alpha(color))),\n                 show.legend =  'none') +\n  labs(x = \"number of sequences (Mil)\") +\n  coord_cartesian(xlim = c(0, 70))\n\np2 / p1 + plot_layout(heights = c(.3, 1)) & scale_color_manual(values = clrs, guide = \"none\") & theme_minimal() \n\n\n\n\n\nSelected Individuals\n\n\ntoggle code\ndata |>\n  filter(select) |>\n  select(pair:year, total_sequences_1) |> \n  arrange(beach, stage, timepoint) |> \n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npair\nsample_id\nbeach\nstage\ntimepoint\nyear\ntotal_sequences_1\n\n\n\n\nF7_FWB_mum_end_2018B\nF7\nFWB\nmum\nend\n2018B\n21647808\n\n\nFWB17_FWB_mum_end_2019B\nFWB17\nFWB\nmum\nend\n2019B\n37893142\n\n\nFWB6_FWB_mum_end_2019B\nFWB6\nFWB\nmum\nend\n2019B\n43409991\n\n\nF9_FWB_mum_start_2018B\nF9\nFWB\nmum\nstart\n2018B\n21228945\n\n\nF8_FWB_mum_start_2018B\nF8\nFWB\nmum\nstart\n2018B\n34213387\n\n\nC7_FWB_pup_end_2018B\nC7\nFWB\npup\nend\n2018B\n43604218\n\n\nC1_FWB_pup_end_2018B\nC1\nFWB\npup\nend\n2018B\n66836626\n\n\nC5_FWB_pup_start_2018B\nC5\nFWB\npup\nstart\n2018B\n32171457\n\n\nC11_FWB_pup_start_2018B\nC11\nFWB\npup\nstart\n2018B\n66712384\n\n\nH19_SSB_pup_end_2018B\nH19\nSSB\npup\nend\n2018B\n17254508\n\n\nH18_SSB_pup_start_2018B\nH18\nSSB\npup\nstart\n2018B\n36548368\n\n\nH16_SSB_pup_start_2018B\nH16\nSSB\npup\nstart\n2018B\n44305419\n\n\nH3_SSB_pup_start_2018B\nH3\nSSB\npup\nstart\n2018B\n64298207\n\n\nH13_SSB_pup_start_2018B\nH13\nSSB\npup\nstart\n2018B\n65665412"
  }
]