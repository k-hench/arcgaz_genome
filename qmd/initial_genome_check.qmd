---
engine: knitr
editor_options: 
  chunk_output_type: console
---

# Initial Genome Check

Loading packages and setting up functions

```{r}
#| message: false
library(tidyverse)
library(patchwork)
library(prismatic)
library(ggforce)
library(geomtextpath)
library(glue)
library(here)

fnt_sel <- "TeX Gyre Pagella"
# clrs <- ghibli::ghibli_palette(name = "TotoroMedium")[c(5,6)]
clrs <- c( clr_darken("#db4a32",.3),
           clr_darken("#66c2a5",.3))

check_paritions <- \(genome = "arcgaz_v1"){
  data <- read_tsv(here("data", "genomes", glue("/{genome}.fa.gz.fai")),
                   col_names = c("seq_name", "length", "offset", "linebases", "linewidth")) |>
    left_join(read_tsv(here("data", "genomes", "partitions", glue("{genome}_partitions.tsv")),
                       # glue("data/genomes/{spec}_partitions.tsv"),
                       col_names = c("seq_name", 'partition'))) |>
    mutate(idx = row_number(),
           end_pos = cumsum(length))

  partitions <- data |>
    group_by(partition) |>
    summarize(
      n = n(),
      length = sum(length),
      end_pos = max(end_pos),
      idx_start = min(idx),
      idx_end = max(idx)
    ) |>
    ungroup() |>
    mutate(failed = partition %in% c('02', '04', '06'))

  p1 <- data |>
    ggplot(aes(x = end_pos * 1e-9, y = idx, color = partition)) +
    geom_vline(data = partitions,
               aes(xintercept = end_pos* 1e-9, color = partition),
               alpha =.3) +
    geom_step(aes(group = 1L))+
    labs(subtitle = genome)

  p2 <- partitions |>
    ggplot(aes(x = partition, y = length, color = partition)) +
    geom_bar(stat = "identity", aes(fill = after_scale(clr_alpha(color)))) +
    # geom_bar(data = partitions |> filter(failed),
    #          stat = "identity", fill = "transparent", color = "black", size = .5) +
    geom_text(aes(y = length /2, label = n), angle = 90, hjust = -.2, 
              color = 'black', family = fnt_sel)+
    labs(subtitle = "sequence within partitions")

  p3 <- partitions |>
    ggplot(aes(x = partition, y = n, color = partition)) +
    geom_bar(stat = "identity", aes(fill = after_scale(clr_alpha(color)))) #+
  # geom_bar(data = partitions |> filter(failed),
  #          stat = "identity", fill = "transparent", color = "black", size = .5)

  p4 <- data |>
    ggplot(aes(x = log10(length))) +
    geomtextpath::geom_textvline(data = tibble(x = c(100, 250, 500, 1000)),
                                 aes(xintercept = log10(x),
                                     label = glue("{x} bp")),
                                 linetype = 3, color = clrs[[2]],
                                 family = fnt_sel,
                                 size = 2.5, hjust = .85) +
    geom_density(color = clr_lighten(clrs[[2]],.2),
                 fill = clr_alpha(clr_lighten(clrs[[2]],.2))) +
    scale_x_reverse() +
    coord_flip(expand = 0, xlim = log10(c(1e8, 30)))+
    labs(subtitle = "scaffold sizes")

  clr_ln <- 'gray50'
   
 p1 + (p2 / p3) + p4 +
      plot_layout(widths = c(.7, 1, .3)) +
      plot_annotation(title = genome) &
      theme_minimal(base_family = fnt_sel) &
      theme(legend.position = "none",
            plot.subtitle = element_text(hjust = .5),
            panel.grid = element_blank(),
            panel.grid.minor = element_blank(),
            axis.ticks = element_line(size = .3, color = clr_ln),
            axis.ticks.length = unit(3, 'pt'),
            axis.line = element_line(color = clr_ln, size = .4))
}

pratition_genome <- \(genome){
  # read in the scaffold sizes from genome index file
  data <- read_tsv(here("data", "genomes", glue("{genome}.fa.gz.fai")),
                   col_names = c("scaff", "length", "offset",
                                 "linebases", "linewidth"))

  # compute total genome length
  total_length <- sum(data$length)

  # compute genome wide end-coordinate for each scaffold,
  # assign to partition by integer division by 0.1 of
  # the total length and export as reference tsv file.
  data2 <- data |>
    mutate(end = cumsum(length),
           partition_prep = str_pad(1 + end %/% (total_length/n_part + 1),
                                    width = 2,
                                    pad = 0),
           partition_idx = as.numeric(factor(partition_prep)))

  n_missing <- n_part - max(data2$partition_idx)
  # print(glue("n_missing: {n_missing}, n_part: {n_part}, max_part: {max(data2$partition_idx)}"))
  if(n_missing > 0){
    data3 <- data2 |>
      group_by(partition_idx) |>
      mutate(partition_adjust = if_else(partition_idx == max(partition_idx),
                                        partition_idx + (row_number() - 1) %/% ( ceiling(n() / (n_missing + 1) )),
                                        partition_idx)) |>
      ungroup()
  } else {
    data3 <- data2 |>
      mutate(partition_adjust = partition_idx)
  }

  data_out <- data3 |>
    mutate(partition = str_pad(partition_adjust, width = 2, pad = 0)) |>
    dplyr::select(scaff, partition) |>
    write_tsv(file = here("data", "genomes", "partitions", glue("{genome}_partitions.tsv")),
              col_names = FALSE)
}
```

Partition all genomes, where the labels indicate the following:

- `arcgaz_v1`: *A. gazella*, original reference genome
- `arcgaz_bp`: *A. gazella*, PacBio based (HighC) reference genome 
- `arcgaz_dt_h1`: *A. gazella* dovetail assembly, haplotype 1
- `arcgaz_dt_h2`: *A. gazella* dovetail assembly, haplotype 2
- `zalcal_v1`:  *Zalophus californianus* reference genome

```{r}
all_genomes <- c('arcgaz_bp', 'arcgaz_dt_h1', 'arcgaz_dt_h2', 'arcgaz_v1', 'zalcal_v1')
n_part <- 19
all_genomes |> walk(pratition_genome)
```

Creating all plots and combining them into a patchwork.

```{r}
#| fig-width: 16.
#| fig-height: 13.
all_genomes |>
  map(check_paritions) |> 
  wrap_plots(ps, ncol = 1) &
  scale_color_manual(values = c(
    scales::colour_ramp(c(clrs[[1]], clr_lighten(clrs[[1]],.9)))(seq(0,1,length.out = ceiling(n_part/2))),
    scales::colour_ramp(c(clr_lighten(clrs[[2]],.9), clrs[[2]]))(seq(0,1,length.out = ceiling(n_part/2)))))
```

