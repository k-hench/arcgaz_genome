---
engine: knitr
editor_options: 
  chunk_output_type: console
---

# Genome Stats

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(prismatic)
library(glue)
library(patchwork)
library(here)
library(jsonlite)
library(kableExtra)
source(here("R/plot_defaults.R"))

genomes <- c("arcgaz_v1_2",
             "arcgaz_v1_4",
             "arcgaz_v3",
             "arcgaz_dt_h1",
             "arcgaz_dt_h2",
             "arcgaz_anc_h1",
             "arcgaz_anc_h2",
             "zalcal_v1")


seq_levels <- c("scaffold",
                "contig",
                "gap")

read_bed <- \(gn){
  file <- here("results", "fa_stats", str_c(gn, "_gaps.bed.gz"))

  read_tsv(file, col_names = c("chr", "start", "end")) |> 
    mutate(gap_length = end - start,
           genome = gn)
}

read_seqkit <- \(gn){
  file <- here("results", "fa_stats", str_c(gn, "_stats_seqkit.tsv"))

  read_table(file) |> 
    mutate(genome = gn,
           seq_type = factor("scaffold", levels = seq_levels)) |> 
    select(-(file:type)) |> 
    set_names(nm = str_to_lower) |> 
    rename(sequence_count = "num_seqs",
           total_bps = "sum_len",
           gc_content = "gc(%)")
}

read_pb_stats <- \(gn){
  file <- here("results", "fa_stats", str_c(gn, "_stats_pb.txt"))
  grps <- seq_levels
  
  tibble(str = read_lines(file)) |> 
    filter(str_detect(str, "[A-Za-z]")) |> 
    mutate(str = str_remove_all(str,"[ ,]") |>
             str_replace(":","|") |>
             str_replace_all("\\|",","),
           check = str_detect(lead(str, default = "_"),"#"),
           seq_type = grps[cumsum(check)]) |> 
    filter(!check) |> 
    select(-check) |> 
    separate(str, into = c("name", "1", "2"), sep = ",") |> 
    pivot_longer(`1`:`2`,
                 names_to = "param",
                 names_transform = as.numeric) |>
    filter(!is.na(value)) |> 
    mutate(param = map2_chr(param, seq_type, \(a,b){
      list(scaffold = c("with_gaps", "without_gaps"),
           contig = c("with_Ns", "without_Ns"),
           gap = c("gap"))[[b]][a]})) |>
    pivot_wider(names_from = name, values_from = value) |> 
    mutate(across(`#Seqs`:`Non-gappedNsCount`, as.numeric),
           genome = gn) |> 
    set_names(nm = str_to_lower) |> 
    rename(sequence_count = "#seqs",
           total_bps = "total") |> 
    mutate(gc_content = NA_real_,
           seq_type = factor(seq_type, levels = seq_levels)) |> 
    filter(!grepl("without_", param))
}

read_assembly_stats <- \(gn){
  file <- here("results", "fa_stats", str_c(gn, "_stats_a.json"))

  js <- read_json(file) 
  
  bind_rows(as_tibble(js$`Contig Stats`) |> mutate(seq_type = "contig"),
            as_tibble(js$`Scaffold Stats`) |> mutate(seq_type = "scaffold")) |> 
    mutate(genome = gn) |> 
    set_names(nm = str_to_lower) |> 
    mutate(seq_type = factor(seq_type, levels = seq_levels))
}

# meta import function
import_data <- \(f){
  args <- rlang::ensyms(f)
  map_dfr(genomes, f) |> 
    mutate(f = rlang::as_string(args[[1]]) |> str_remove("read_"),
           genome = factor(genome, levels = genomes)) |> 
    group_by(f) |> 
    nest()
}

data <- bind_rows(import_data(read_seqkit),
                  import_data(read_bed),
                  import_data(read_pb_stats),
                  import_data(read_assembly_stats))

# data_pb_stats <- genomes |> 
#   map_dfr(read_pb_stats)
```

Sequence Numbers

```{r}
data[c(1,3,4),] |> 
  mutate(general_stats = map(data, \(df){df |> select(genome, seq_type, gc_content, sequence_count, total_bps)})) |> 
  select(-data) |> 
  unnest(general_stats) |>
  mutate(k_seq = sequence_count * 1e-3,
         total_Mb = total_bps * 1e-6) |> 
  select(-c(sequence_count:total_bps)) |> 
  pivot_longer(gc_content:total_Mb) |> 
  filter(!is.na(value)) |> 
  mutate(value = sprintf("%.2f", value)) |> 
  pivot_wider(names_from = genome, values_from = value) |> 
  arrange(name, seq_type, f) |> 
  select(stat = name, seq_type,arcgaz_v1_2:zalcal_v1, software = f) |>
  set_names(\(x){str_replace(x, "[a-z]{5}_","_") |> 
      str_replace("([0-9])_([0-9])","\\1.\\2")}) |> 
  kbl(align = "r") |> 
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), font_size = 13) |> 
  column_spec(8, color = "black", background = "#d2d2d2") |> 
  pack_rows("GC content", 1, 3) |> 
  pack_rows("Sequences (10^3)", 4, 9) |> 
  pack_rows("assembly length", 10, 15) 
```

N-stats

```{r}
data[c(1,3,4),] |> 
  mutate(n_stats = map(data, \(df){df |> select(genome, seq_type, matches("n[0-9]"))})) |> 
  select(-data) |> 
  unnest(n_stats)  |> 
  pivot_longer(starts_with("n")) |>
  filter(!is.na(value),
         seq_type != "gap") |> 
  ggplot() +
  geom_point(aes(x = genome,
                 y = value * 1e-9, 
                 color = name,
                 size = f, 
                 shape = f)) +
  facet_grid(. ~ seq_type) +
  scale_shape_manual(values = c( assembly_stats = 19, pb_stats = 1, seqkit = 1), guide = "none") +
  scale_size_manual(values = c(assembly_stats = 1.5, pb_stats = 3, seqkit = 4.5), guide = "none") +
  labs(y = "scaffold lenghth (Gb)", x = NULL, color = NULL) +
  theme_minimal(base_family = fnt_sel) +
  theme(axis.text.x = element_text(angle = 90),
        panel.background = element_rect(colour = "gray70"),
        legend.position = "bottom")
```

Gaps

```{r}
#| fig-width: 9.
#| fig-height: 8.
data$data[[2]] |> 
  ggplot(aes(x = gap_length)) +
  # geom_density() +
  geom_histogram(breaks = c(0.1, 5, c(rep(c(1, 5), 7) * rep(c(1e1,1e2,1e3,1e4,1e5,1e6,1e7), each = 2))),
                 fill = clr_alpha("gray50"), color = "gray20",
                 linewidth = .3) +
  scale_x_log10(breaks = c(10, 100, 1e3, 1e6),
                labels = c("10bp", "100bp", "1kb", "1Mb")) +
  facet_grid(genome ~ ., scales = "free",switch = "y") +
  labs(y = "gap count (n)", x  = "gap length") +
  theme_minimal(base_family = fnt_sel)
```

