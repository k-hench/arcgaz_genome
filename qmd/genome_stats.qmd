---
engine: knitr
editor_options: 
  chunk_output_type: console
---

# Genome Stats

## Basic Stats

::: {.callout-note}
Results for this section are created within `workflow/rules/genome_stats.smk` and can be recreated using:

```sh
snakemake <run-options> \
  --configfile workflow/config_all_genomes.yml \
  -R fa_stats
```
:::

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(prismatic)
library(glue)
library(patchwork)
library(here)
library(jsonlite)
library(kableExtra)
source(here("R/plot_defaults.R"))

genomes <- c("arcgaz_v1_2",
             "arcgaz_v1_4",
             "arcgaz_v3",
             "arcgaz_dt_h1",
             "arcgaz_dt_h2",
             "arcgaz_anc_h1",
             "arcgaz_anc_h2",
             "zalcal_v1")


seq_levels <- c("scaffold",
                "contig",
                "gap")

read_bed <- \(gn){
  file <- here("results", "fa_stats", str_c(gn, "_gaps.bed.gz"))

  read_tsv(file, col_names = c("chr", "start", "end")) |> 
    mutate(gap_length = end - start,
           genome = gn)
}

read_seqkit <- \(gn){
  file <- here("results", "fa_stats", str_c(gn, "_stats_seqkit.tsv"))

  read_table(file) |> 
    mutate(genome = gn,
           seq_type = factor("scaffold", levels = seq_levels)) |> 
    select(-(file:type)) |> 
    set_names(nm = str_to_lower) |> 
    rename(sequence_count = "num_seqs",
           total_bps = "sum_len",
           gc_content = "gc(%)")
}

read_pb_stats <- \(gn){
  file <- here("results", "fa_stats", str_c(gn, "_stats_pb.txt"))
  grps <- seq_levels
  
  tibble(str = read_lines(file)) |> 
    filter(str_detect(str, "[A-Za-z]")) |> 
    mutate(str = str_remove_all(str,"[ ,]") |>
             str_replace(":","|") |>
             str_replace_all("\\|",","),
           check = str_detect(lead(str, default = "_"),"#"),
           seq_type = grps[cumsum(check)]) |> 
    filter(!check) |> 
    select(-check) |> 
    separate(str, into = c("name", "1", "2"), sep = ",") |> 
    pivot_longer(`1`:`2`,
                 names_to = "param",
                 names_transform = as.numeric) |>
    filter(!is.na(value)) |> 
    mutate(param = map2_chr(param, seq_type, \(a,b){
      list(scaffold = c("with_gaps", "without_gaps"),
           contig = c("with_Ns", "without_Ns"),
           gap = c("gap"))[[b]][a]})) |>
    pivot_wider(names_from = name, values_from = value) |> 
    mutate(across(`#Seqs`:`Non-gappedNsCount`, as.numeric),
           genome = gn) |> 
    set_names(nm = str_to_lower) |> 
    rename(sequence_count = "#seqs",
           total_bps = "total") |> 
    mutate(gc_content = NA_real_,
           seq_type = factor(seq_type, levels = seq_levels)) |> 
    filter(!grepl("without_", param))
}

read_assembly_stats <- \(gn){
  file <- here("results", "fa_stats", str_c(gn, "_stats_a.json"))

  js <- read_json(file) 
  
  bind_rows(as_tibble(js$`Contig Stats`) |> mutate(seq_type = "contig"),
            as_tibble(js$`Scaffold Stats`) |> mutate(seq_type = "scaffold")) |> 
    mutate(genome = gn) |> 
    set_names(nm = str_to_lower) |> 
    mutate(seq_type = factor(seq_type, levels = seq_levels))
}

# meta import function
import_data <- \(f){
  args <- rlang::ensyms(f)
  map_dfr(genomes, f) |> 
    mutate(f = rlang::as_string(args[[1]]) |> str_remove("read_"),
           genome = factor(genome, levels = genomes)) |> 
    group_by(f) |> 
    nest()
}

data <- bind_rows(import_data(read_seqkit),
                  import_data(read_bed),
                  import_data(read_pb_stats),
                  import_data(read_assembly_stats))

# data_pb_stats <- genomes |> 
#   map_dfr(read_pb_stats)
```

Sequence Numbers

```{r}
data[c(1,3,4),] |> 
  mutate(general_stats = map(data, \(df){df |> select(genome, seq_type, gc_content, sequence_count, total_bps)})) |> 
  select(-data) |> 
  unnest(general_stats) |>
  mutate(k_seq = sequence_count * 1e-3,
         total_Mb = total_bps * 1e-6) |> 
  select(-c(sequence_count:total_bps)) |> 
  pivot_longer(gc_content:total_Mb) |> 
  filter(!is.na(value)) |> 
  mutate(value = sprintf("%.2f", value)) |> 
  pivot_wider(names_from = genome, values_from = value) |> 
  arrange(name, seq_type, f) |> 
  select(stat = name, seq_type,arcgaz_v1_2:zalcal_v1, software = f) |>
  set_names(\(x){str_replace(x, "[a-z]{5}_","_") |> 
      str_replace("([0-9])_([0-9])","\\1.\\2")}) |> 
  kbl(align = "r") |> 
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), font_size = 13) |> 
  column_spec(8, color = "black", background = "#d2d2d2") |> 
  pack_rows("GC content", 1, 3) |> 
  pack_rows("Sequences (10^3)", 4, 9) |> 
  pack_rows("assembly length", 10, 15) 
```

N-stats

```{r}
data[c(1,3,4),] |> 
  mutate(n_stats = map(data, \(df){df |> select(genome, seq_type, matches("n[0-9]"))})) |> 
  select(-data) |> 
  unnest(n_stats)  |> 
  pivot_longer(starts_with("n")) |>
  filter(!is.na(value),
         seq_type != "gap") |> 
  filter(!is.na(value),
         name == "n50",
         f == "assembly_stats") |> 
  mutate(value = prettyNum(value, big.mark = ",")) |> 
  pivot_wider(names_from = genome, values_from = value) |> 
  arrange(name, seq_type, f) |> 
  select(stat = name, seq_type,arcgaz_v1_2:zalcal_v1, software = f) |>
  set_names(\(x){str_replace(x, "[a-z]{5}_","_") |> 
      str_replace("([0-9])_([0-9])","\\1.\\2")}) |> 
  kbl(align = "r") |> 
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), font_size = 13) |> 
  column_spec(8, color = "black", background = "#d2d2d2")

data[c(1,3,4),] |> 
  mutate(n_stats = map(data, \(df){df |> select(genome, seq_type, matches("n[0-9]"))})) |> 
  select(-data) |> 
  unnest(n_stats)  |> 
  pivot_longer(starts_with("n")) |>
  filter(!is.na(value),
         seq_type != "gap") |> 
  ggplot() +
  geom_point(aes(x = genome,
                 y = value * 1e-9, 
                 alpha = genome == "arcgaz_anc_h1",
                 color = name,
                 size = f, 
                 shape = f)) +
  facet_grid(. ~ seq_type) +
  scale_shape_manual(values = c( assembly_stats = 19, pb_stats = 1, seqkit = 1), guide = "none") +
  scale_size_manual(values = c(assembly_stats = 1.5, pb_stats = 3, seqkit = 4.5), guide = "none") +
  scale_alpha_manual(values = c(`TRUE` = 1,
                                `FALSE` = .35),
                     guide = "none") +
  labs(y = "scaffold lenghth (Gb)", x = NULL, color = NULL) +
  theme_minimal(base_family = fnt_sel) +
  theme(axis.text.x = element_text(angle = 90),
        panel.background = element_rect(colour = "gray70"),
        legend.position = "bottom")
```

Gaps

```{r}
#| fig-width: 9.
#| fig-height: 8.
data$data[[2]] |> 
  ggplot(aes(x = gap_length)) +
  # geom_density() +
  geom_histogram(breaks = c(0.999, 5, c(rep(c(1, 5), 7) * rep(c(1e1,1e2,1e3,1e4,1e5,1e6,1e7), each = 2))),
                 aes(color = genome == "arcgaz_anc_h1", fill = after_scale(clr_alpha(color))),
                 linewidth = .3) +
  scale_x_log10(breaks = c(10, 100, 1e3, 1e6),
                labels = c("10bp", "100bp", "1kb", "1Mb")) +
  scale_color_manual(values = c(`TRUE` = "gray20",
                                `FALSE` = "gray70"),
                     guide = "none") +
  facet_grid(genome ~ ., scales = "free",switch = "y") +
  labs(y = "gap count (n)", x  = "gap length") +
  theme_minimal(base_family = fnt_sel)
```

## Genome Content (`blast` results)

::: {.callout-note}
Results for this section are created within `workflow/rules/busco_and_blast.smk` and can be recreated using:

```sh
snakemake <run-options> \
  --configfile workflow/config_all_genomes.yml \
  -R all_blast
```
:::

MHC (haplotype 1)

```{r}
#| fig-width: 7.
#| fig-height: 18.
source(here("R/cartesian_alignment_helpers.R"))
read_blast <- \(gn, querry){
    file <- here("results", "blast", str_c(querry, "_on_", gn, ".csv"))
    
    read_csv(file, col_names = c("qaccver", "saccver", "pident", "length",
                                 "mismatch", "gapopen", "qstart", "qend",
                                 "sstart", "send", "evalue", "bitscore")) |> 
      mutate(genome = gn) |> 
      left_join(gn_plot |> rename(chr = "saccver")) |> 
    mutate(gstart = start + sstart,
           gend = start + send,
           gmid = (gstart + gend) / 2)
}

gn_plot <- genomes |> 
  map_dfr(read_size,
          order_by = "name",
          manual_order_18 = manual_order_18) |> 
  mutate(plt_grp = if_else(in_top,eo,2))

mhc <- genomes |> 
  map_dfr(read_blast,
          querry = "dog_mhc_transcripts") |>
  group_by(genome, qaccver) |> 
  mutate(y = row_number(),
         id_with_url = str_remove(qaccver, "\\..*")) |> 
  ungroup() |> 
  left_join(read_csv(here("data/ncbi_seqs/dog_mhc_transcripts.csv")))

gb_trans  <- scales::trans_new("gb_trans",
                transform = function(x){x * 1e-9},
                inverse = function(y){y * 1e9},
                format = function(x){x * 1e-9})

scale_x_arcgaz <- function(...){
  scale_x_continuous("Genomic position (Gb)",
                     trans = gb_trans,
                     breaks = 0:5 * 5e8,
                     ...,
                     sec.axis = sec_axis(trans = identity,
                                         breaks = gn_plot$mid[gn_plot$genome == genomes[[6]] ][1:18], 
                                         labels = str_remove( gn_plot$chr[gn_plot$genome == genomes[[6]] ][1:18], ".*_")))
}

mhc |> 
  ggplot() +
  geom_blank(aes(y = name, x = gmid)) +
  geom_rect(data = gn_plot,
            aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf, fill = factor(plt_grp)),
            color = "transparent", linewidth = 0) +
  geom_point(aes(y = name, x = gmid, color = log10(evalue)), alpha = .8) +
  scale_fill_manual(values = c(`1` = clr_alpha("gray30",.3),
                               `0` = "transparent", 
                               `2` = "gray50"),
                    guide = "none") +
  facet_grid(genome ~ ., switch = "y") +
  scale_x_arcgaz() +
  scale_color_binned(type = "viridis",
                     option = "C", 
                     direction = -1,
                     breaks = c(-Inf, -100, -50, -10, Inf)) +
  # scale_color_viridis_c(option = "C",
  #                       direction = -1,
  #                       guide = guide_colorbar(barheight = unit(5,"pt"),
  #                                              barwidth = unit(.5,"npc"))) +
  labs(y = NULL) +
  # coord_cartesian(ylim = 0:1) +
  theme_minimal(base_family = fnt_sel) +
  theme(legend.position = "bottom",
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        axis.text.y = element_text(size = 5))
  # geom_linerange(aes(xmin = gstart, xmax = gend),
  #                linewidth = 3, color = "red", alpha = .5) +
  # facet_wrap(y ~ .,
  #            scales = "free")
```

MT / NUMTs (haplotype 1)

> *"If $E < 1e - 50$ (or 1 × 10-50), there should be an extremely high confidence that the database match is a result of homologous relationships. If E is between 0.01 and 1e - 50, the match can be considered a result of homology. If E is between 0.01 and 10, the match is considered not significant, but may hint at a tentative remote homology relationship."* (from [Ricardo Avila](https://ravilabio.info/notes/bioinformatics/e-value-bitscore.html))

```{r}
#| fig-width: 7.
#| fig-height: 8.
mt <- genomes |> 
  map_dfr(read_blast,
          querry = "arcgaz_mt") |> 
  group_by(qaccver) |> 
  mutate(y = row_number()) |> 
  ungroup()

ggplot(data = gn_plot) +
  geom_rect(aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf, fill = factor(plt_grp)),
            color = "transparent", linewidth = 0) +
  geom_hline(yintercept = c(log10(0.01), -50), linetype = 3, color = rgb(0,0,0,.5))+
  geom_point(data = mt, aes(x = gmid, y = log10(evalue))) + 
  scale_fill_manual(values = c(`1` = "gray90",
                               `0` = "transparent", 
                               `2` = "gray50"),
                    guide = "none") +
  facet_grid(genome ~ ., switch = "y") +
  scale_x_arcgaz() +
  # coord_cartesian(ylim = 0:1) +
  theme_minimal(base_family = fnt_sel)+
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())
```

## BUSCO scores

These were conducted with the `carnivora_odb10` reference set (compared to the `eukaryota_odb10` of the original Dovetail assemblies)

```{r}
read_busco_summary <- \(gn){
  file <- here("results", "busco", gn, "run_carnivora_odb10", "short_summary.txt")
  
  read_tsv(file,
         skip = 9, n_max = 5, col_names = c("n1", "count", "stat","n2","n3","n4")) |> 
  dplyr::select(count:stat) |> 
  mutate(stat = str_replace(stat, " \\(", "_") |> str_remove("\\)")) |> 
  separate(stat, into = c("label", "abbrev"), sep = '_') |> 
  mutate(abbrev = factor(abbrev, levels = c("C","S", "D", "F", "M"))) |> 
  arrange(-as.numeric(abbrev)) |> 
  mutate(genome = gn,
         prct = count / 14502,
         lab_y = c(1:4,0) * .2,#lag(cumsum(prct), default = 0) + .5 * prct,
         x_lab = c(1.6,1.7,1.8,1,.5))
}

read_busco_full <- \(gn){
  file <- here("results", "busco", gn, "run_carnivora_odb10", "full_table.tsv")
  
  read_tsv(file,
         skip = 9, n_max = 5, col_names = c("n1", "count", "stat","n2","n3","n4")) |> 
  mutate(genome = gn)
}
```


```{r}
genomes[c(3,6:8)] |> 
  map_dfr(read_busco_summary) |> 
  filter(abbrev != "C") |> 
  ggplot() +
  ggstance::geom_barh(aes(y = genome, x = prct, fill = abbrev),
           stat = 'identity') +
  geom_text(aes(y = as.numeric(factor(genome)) - .5 +  lab_y, 
                x = 1.05,
                label = str_c(abbrev,": ", sprintf('%.1f', prct*100), "%"),
                color = abbrev,
                family = fnt_sel)) +
  # facet_wrap(genome ~ ., nrow = 1) +
  # coord_polar(theta = 'y') +
  # scale_x_continuous(limits = c(0,2.5)) +
  theme_void(base_family = fnt_sel) +
  theme(legend.position = "none",
      axis.text.y = element_text(angle = 90))

read_busco_full(genomes[[6]])
```

